name: VMware Image Builder

on:
  workflow_dispatch:
  push:
  pull_request:

jobs:
#### START: TO BE REPLACED BY VIB PACKAGING ###
  vib-prepare:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout
        id: vib_checkout
        uses: actions/checkout@v2
        with:
          path: harbor
      - name: Set up Helm
        id: helm_setup
        uses: azure/setup-helm@v1
        with:
          version: '3.2.3'

      - name: Update dependency
        id: helm_update
        working-directory: ./harbor
        run:
          helm dependency update .

      - name: Pack
        id: helm_pack
        working-directory: ./harbor
        run:
          helm package .

      - name: Get Helm Chart Version
        id: lookup_version
        uses: mikefarah/yq@master
        with:
          cmd: yq eval '.name, .version' './harbor/Chart.yaml' | paste -sd "-" -

      - name: Prepare Chart
        id: vib_build
        run: |
          tree
          shm_id=$(sha256sum  ./harbor/${{ steps.lookup_version.outputs.result }}.tgz | awk '{print $1}')
          filename="${{ steps.lookup_version.outputs.result }}-$shm_id.tar.gz"
          mv ./harbor/${{ steps.lookup_version.outputs.result }}.tgz "$filename"
          chart_uri="https://martinpe.jfrog.io/artifactory/default-generic-local/$filename"
          curl -s -H "Authorization: Bearer $ARTIFACTORY_TOKEN" -T "$filename" $chart_uri
          echo "Setting output to $chart_uri"
          echo ::set-output name=chart_uri::"$chart_uri"
        shell: bash
        env: 
          ARTIFACTORY_TOKEN: ${{ secrets.ARTIFACTORY_TOKEN }}
    outputs:
      chart_uri: ${{ steps.vib_build.outputs.chart_uri }}

#### END: TO BE REPLACED BY VIB PACKAGING ###

  vib-validate:
    runs-on: ubuntu-latest
    needs: [vib-prepare]
    env: 
      VIB_PUBLIC_URL: https://cp.bromelia.vmware.com
      CSP_API_URL: https://console.cloud.vmware.com   
      CSP_API_TOKEN: ${{ secrets.CSP_API_TOKEN }}    
    steps:
      - name: Checkout
        id: vib_checkout
        uses: actions/checkout@v2
        with:
          path: harbor

      - name: Send VIB Pipeline
        id: vib_validate_pipeline
        run: |        
          echo "Reading pipeline from $CHART_URI"
          awk '{sub("{HELM_CHART}", uri)}1' uri="$CHART_URI" $PIPELINE > pipeline-int.json
          echo "Updating values..."
          export CHART_VALUES=$(base64 ./harbor/.vib/chart-values.yaml)
          awk '{sub("{CHART_VALUES}", values)}1' values="$CHART_VALUES" pipeline-int.json > pipeline.json
          echo "We will send this pipeline:"
          cat pipeline.json
          EXECUTION_GRAPH_URI=$(./harbor/.vib/scripts/vib-send.sh --pipeline=pipeline.json)          
          echo "Created new execution graph: ${EXECUTION_GRAPH_URI}"
          echo ::set-output name=execution_graph_id::"$EXECUTION_GRAPH_URI"
        env: 
          PIPELINE: ./harbor/.vib/cp-static-trivy.json
          CHART_URI: ${{ needs.vib-prepare.outputs.chart_uri }}
      - name: Static Analysis
        id: vib_lint
        run: |
          echo "Execution graph id: ${{ steps.vib_validate_pipeline.outputs.execution_graph_id }}"
          ./harbor/.vib/scripts/vib-check.sh --url="${{ steps.vib_validate_pipeline.outputs.execution_graph_id }}" --phase=PACKAGE --action=linter-packaging --interval=15 --timeout=1800
      - name: Vulnerability Scanning
        id: vib_trivy
        run: |
          echo "Execution graph id: ${{ steps.vib_validate_pipeline.outputs.execution_graph_id }}"
          ./harbor/.vib/scripts/vib-check.sh --url="${{ steps.vib_validate_pipeline.outputs.execution_graph_id }}" --phase=VERIFY --action=trivy --interval=15 --timeout=1800
      - name: Download Execution Graph
        id: vib_download
        if: always()
        run: |
          ./harbor/.vib/scripts/vib-download.sh --url="${{ steps.vib_validate_pipeline.outputs.execution_graph_id }}" --output=outputs
      - name: Archive Execution Graph
        id: vib_archive
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: static-analysis-assets.zip
          path: |
            outputs/execution_graph-${{ github.sha }}.json
            outputs/execution_graph-${{ github.sha }}-report.json
            outputs/**.txt
  vib-k8s-verify:
    runs-on: ubuntu-latest
    needs: [vib-prepare,vib-validate]
    strategy:
      matrix:
        platform: [tkg-1.3.0-aws,tkg-1.4.0-vmc,gke,aks]
      fail-fast: false
    env: 
      PIPELINE: ./harbor/.vib/cp-${{ matrix.platform }}.json
      VIB_PUBLIC_URL: https://cp.bromelia.vmware.com
      CSP_API_URL: https://console.cloud.vmware.com   
      CSP_API_TOKEN: ${{ secrets.CSP_API_TOKEN }}          
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          path: harbor
      - name: Send VIB Pipeline
        id: vib_verify_pipeline
        run: |        
          echo "Reading pipeline from $CHART_URI"
          awk '{sub("{HELM_CHART}", uri)}1' uri="$CHART_URI" $PIPELINE > pipeline-int.json
          echo "Updating values..."
          export CHART_VALUES=$(base64 ./harbor/.vib/chart-values.yaml)
          awk '{sub("{CHART_VALUES}", values)}1' values="$CHART_VALUES" pipeline-int.json > pipeline.json
          echo "We will send this pipeline:"
          cat pipeline.json
          EXECUTION_GRAPH_URI=$(./harbor/.vib/scripts/vib-send.sh --pipeline=pipeline.json)          
          echo "Created new execution graph: ${EXECUTION_GRAPH_URI}"
          echo ::set-output name=execution_graph_id::"$EXECUTION_GRAPH_URI"
        env: 
          PIPELINE: ./harbor/.vib/cp-${{ matrix.platform}}.json
          CHART_URI: ${{ needs.vib-prepare.outputs.chart_uri }}

      - name: Health Check
        id: vib-health
        run: |
          echo "Execution graph id: ${{ steps.vib_verify_pipeline.outputs.execution_graph_id }}"
          ./harbor/.vib/scripts/vib-check.sh --url="${{ steps.vib_verify_pipeline.outputs.execution_graph_id }}" --phase=VERIFY --action=health-check --interval=30 --timeout=2800
      - name: Cypress
        id: vib-cypress
        run: |
          echo "Execution graph id: ${{ steps.vib_verify_pipeline.outputs.execution_graph_id }}"
          ./harbor/.vib/scripts/vib-check.sh --url="${{ steps.vib_verify_pipeline.outputs.execution_graph_id }}" --phase=VERIFY --action=cypress --interval=30 --timeout=2800
      - name: Server Tests
        id: vib-goss
        run: |
          echo "Execution graph id: ${{ steps.vib_verify_pipeline.outputs.execution_graph_id }}"
          ./harbor/.vib/scripts/vib-check.sh --url="${{ steps.vib_verify_pipeline.outputs.execution_graph_id }}" --phase=VERIFY --action=goss --interval=30 --timeout=2800
      - name: Resilience Tests
        id: vib-resilience-tests
        run: |
          echo "Execution graph id: ${{ steps.vib_verify_pipeline.outputs.execution_graph_id }}"
          ./harbor/.vib/scripts/vib-check.sh --url="${{ steps.vib_verify_pipeline.outputs.execution_graph_id }}" --phase=VERIFY --action=resilience-tests --interval=30 --timeout=2800
      - name: Download Execution Graph
        id: vib_download
        if: always()
        run: |
          ./harbor/.vib/scripts/vib-download.sh --url="${{ steps.vib_verify_pipeline.outputs.execution_graph_id }}" --output=outputs-${{ matrix.platform }}
      - name: Archive Execution Graph
        id: vib_archive
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: static-analysis-assets-${{ matrix.platform }}.zip
          path: |
            outputs-${{ matrix.platform }}/execution_graph-${{ github.sha }}.json
            outputs-${{ matrix.platform }}/execution_graph-${{ github.sha }}-report.json
            outputs-${{ matrix.platform }}/**.txt




